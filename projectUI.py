# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'concept_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, cv2, threading
import mediapipe as mp
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from qt_material import apply_stylesheet
import time



class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.ocv = False

    def quitButton_clicked(self):
        self.ocv = False        
        time.sleep(1)
        sys.exit()

    def startButton_clicked(self):
        self.textEdit_3.setText("Please wait for the camera showing up.")
        self.ocv = True
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 845)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # text box for time limit
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(900, 730, 150, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)       
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setText("5 seconds")
        self.textEdit.setReadOnly(True)

        # text box for message
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(50, 780, 1000, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_3.setText("Here comes the message for the user.")
        self.textEdit_3.setReadOnly(True)

        # button for quit the application
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(950, 120, 100, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("quitButton")
        self.pushButton.setText("Quit")
        self.pushButton.clicked.connect(self.quitButton_clicked)

        #button for starting the camera
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(950, 50, 100, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("startButton")
        self.pushButton_2.setText("Start")
        self.pushButton_2.clicked.connect(self.startButton_clicked)

        self.textEdit.raise_()
        self.textEdit_3.raise_()        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1130, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # label for the camera
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1100, 50, 720, 480))

        # label for whiteboard
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 50, 830, 720))
        self.label_2.setStyleSheet("background-color: white;")
        self.label_2.setObjectName("label_2")
                               
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # function for the camera
    def opencv(self):
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("Error: Could not open camera.")
            exit()
        while self.ocv == True:
            ret, frame = cap.read()
            if not ret:
                print("Error: Could not read frame.")
                break
            frame = cv2.resize(frame, (800, 600))
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            height, width, channel = frame.shape
            bytesPerLine = channel * width
            qimg = QImage(frame.data, width, height, bytesPerLine, QImage.Format_RGB888)
            self.label.setPixmap(QPixmap.fromImage(qimg))
        
        cap.release()
        cv2.destroyAllWindows()


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    apply_stylesheet(app, theme='dark_teal.xml') 

    vedio = threading.Thread(target=ui.opencv)
    vedio.start()
    MainWindow.showMaximized()

    sys.exit(app.exec_())
